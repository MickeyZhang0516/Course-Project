colnames(rc) = c('area','time','neurons','size')
options(digits=9)
rc$time = as.numeric(rc$time)
ggplot(data = rc, aes(x=as.numeric(time), y =neurons, color = area, size =size))+
geom_point()+
labs(title = 'Neural Acitivity in Session 17 Trial 2',
subtitle = 'Success(1)')+
scale_x_continuous(name = 'Time(s)',n.breaks=10)+
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.title = element_text(hjust = 0.5))
suppressPackageStartupMessages(suppressWarnings(library(tidyverse)))
suppressWarnings(library(knitr))
session=list()
name = c()
date = c()
trials = c()
neurons = c()
nareas = c()
rate = c()
for(i in 1:18){
session[[i]]=readRDS(paste('C:/Users/Daisy/Downloads/R scripts/STA 141A/Data/session',i,'.rds',sep=''))
name[i]=session[[i]]$mouse_name
date[i]=session[[i]]$date_exp
trials[i]=length(session[[i]]$feedback_type)
neurons[i]=length(session[[i]]$brain_area)
nareas[i]=length(unique(session[[i]]$brain_area))
options(digits=2)
rate[i]=mean(session[[i]]$feedback_type+1)/2
}
overview = tibble(1:18, date, name, trials, neurons, nareas, rate)
colnames(overview) = c('Session', 'Date of Experiment','Mouse Name','Number of Trials', 'Number of Neurons','Number of Brain Areas Involved', 'Success Rate')
knitr::kable(overview, caption = 'Data Set Overview')
suppressPackageStartupMessages(suppressWarnings(library(tidyverse)))
suppressWarnings(library(knitr))
session=list()
name = c()
date = c()
trials = c()
neurons = c()
nareas = c()
rate = c()
for(i in 1:18){
session[[i]]=readRDS(paste('C:/Users/Daisy/Downloads/R scripts/STA 141A/Data/session',i,'.rds',sep=''))
name[i]=session[[i]]$mouse_name
date[i]=session[[i]]$date_exp
trials[i]=length(session[[i]]$feedback_type)
neurons[i]=length(session[[i]]$brain_area)
nareas[i]=length(unique(session[[i]]$brain_area))
options(digits=2)
rate[i]=mean(session[[i]]$feedback_type+1)/2
}
overview = tibble(1:18, date, name, trials, neurons, nareas, rate)
colnames(overview) = c('Session', 'Date of Experiment','Mouse Name','Number of Trials', 'Number of Neurons','Number of Brain Areas Involved', 'Success Rate')
knitr::kable(overview, caption = 'Data Set Overview')
i.s= 17
i.t = 1
spk.trial = session[[i.s]]$spks[[i.t]]
feedback = session[[i.s]]$feedback_type[[i.t]]
area=session[[i.s]]$brain_area
spk.count=apply(spk.trial,1,sum)
s17t1 = data.frame(area,spk.count)
print(data.frame(aggregate(.~area,data=s17t1,FUN=sum),feedback))
print(data.frame(aggregate(.~area,data=s17t1,FUN=mean),feedback))
s17 = data.frame()
for( i.t in 1:length(session[[i.s]]$feedback_type)){
spk.trial = session[[i.s]]$spks[[i.t]]
feedback = session[[i.s]]$feedback_type[[i.t]]
area=session[[i.s]]$brain_area
spk.count=apply(spk.trial,1,sum)
df = data.frame(area,spk.count)
s17 = rbind(s17,data.frame(aggregate(.~area,data=df,FUN=sum),feedback))
}
ggplot(s17, aes(spk.count, feedback, colour = area)) +
geom_point()+
scale_x_continuous(n.breaks=10)+
scale_y_continuous(n.breaks=2)+
labs(x = 'Number of Spikes', y ='Feedback',title = 'Total Number of Spikes vs. Feedback') +
theme(plot.title = element_text(hjust = 0.5))
s17.avg = data.frame()
for( i.t in 1:length(session[[i.s]]$feedback_type)){
spk.trial = session[[i.s]]$spks[[i.t]]
feedback = session[[i.s]]$feedback_type[[i.t]]
area=session[[i.s]]$brain_area
spk.count=apply(spk.trial,1,sum)
df = data.frame(area,spk.count)
s17.avg = rbind(s17.avg,data.frame(aggregate(.~area,data=df,FUN=mean),feedback))
}
ggplot(s17.avg, aes(spk.count, feedback, colour = area)) +
geom_point()+
scale_x_continuous(n.breaks=10)+
scale_y_continuous(n.breaks=2)+
labs(x = 'Number of Spikes', y ='Feedback',title = 'Average Number of Spikes vs. Feedback') +
theme(plot.title = element_text(hjust = 0.5))
i.t = 1
spks = data.frame(session[[i.s]]$spks[[i.t]])
time.points = session[[i.s]]$time[[i.t]]
colnames(spks) = time.points
spks = cbind(area, spks)
rc = data.frame()
for ( r in 1:nrow(spks)){
for (c in 2:ncol(spks)){
if (spks[r,c]>0){
time = as.numeric(colnames(spks)[c])
info = c(spks[r,1],time,r,spks[r,c])
rc = rbind(rc,info)
}
}
}
colnames(rc) = c('area','time','neurons','size')
options(digits=9)
rc$time = as.numeric(rc$time)
ggplot(data = rc, aes(x=as.numeric(time), y =neurons, color = area, size = size))+
geom_point()+
labs(title = 'Neural Acitivity in Session 17 Trial 1',
subtitle = 'Failure(-1)')+
scale_x_continuous(name = 'Time(s)',n.breaks=10)+
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.title = element_text(hjust = 0.5))
i.t = 2
spks = data.frame(session[[i.s]]$spks[[i.t]])
time.points = session[[i.s]]$time[[i.t]]
colnames(spks) = time.points
spks = cbind(area, spks)
rc = data.frame()
for ( r in 1:nrow(spks)){
for (c in 2:ncol(spks)){
if (spks[r,c]>0){
time = as.numeric(colnames(spks)[c])
info = c(spks[r,1],time,r,spks[r,c])
rc = rbind(rc,info)
}
}
}
colnames(rc) = c('area','time','neurons','size')
options(digits=9)
rc$time = as.numeric(rc$time)
ggplot(data = rc, aes(x=as.numeric(time), y =neurons, color = area, size =size))+
geom_point()+
labs(title = 'Neural Acitivity in Session 17 Trial 2',
subtitle = 'Success(1)')+
scale_x_continuous(name = 'Time(s)',n.breaks=10)+
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.title = element_text(hjust = 0.5))
integrated = list()
for (i.s in 1:length(session)){
s = data.frame()
n.trials = length(session[[i.s]]$spks)
for (i.t in 1:n.trials){
spk.trial = session[[i.s]]$spks[[i.t]]
feedback = (session[[i.s]]$feedback_type[[i.t]]+1)/2
area=session[[i.s]]$brain_area
spk.count=apply(spk.trial,1,sum)
df = data.frame(area,spk.count)
agg = aggregate(.~area,data=df,FUN=mean)
s[i.t,1:length(agg$spk.count)] = agg[1:length(agg$spk.count),2]
s$feedback[i.t] = feedback
colnames(s) =  c(agg[1:length(agg$spk.count),1],'feedback')
}
integrated[[i.s]] = s
}
final = data.frame()
i.r = c()
for (i.s in 1:length(session)){
i.r[i.s] = nrow(integrated[[i.s]])
}
i.r = c(0,i.r)
i.i = data.frame()
for (i.s in 1:length(session)){
i.i[i.s,1] = sum(i.r[1:i.s])+1
i.i[i.s,2] = sum(i.r[1:i.s])+nrow(integrated[[i.s]])
}
c = 1
for (i.s in 1:length(session)){
for ( n.area in 1:length(integrated[[i.s]])){
if (colnames(integrated[[i.s]][n.area]) %in% colnames(final)){
a = which(colnames(final) == colnames(integrated[[i.s]][n.area]))
integrated[[i.s]][[n.area]]
final[i.i[i.s,1]:i.i[i.s,2],a]=integrated[[i.s]][[n.area]]
} else {
final = final %>% add_column (add_column = NA)
colnames(final)[c]= colnames(integrated[[i.s]][n.area])
integrated[[i.s]][[n.area]]
final[i.i[i.s,1]:i.i[i.s,2],c]=integrated[[i.s]][[n.area]]
c = c+1
}
}
}
final[is.na(final)]=0
final = final %>% relocate(feedback)
View(final)
final = data.frame()
i.r = c()
for (i.s in 1:length(session)){
i.r[i.s] = nrow(integrated[[i.s]])
}
i.r = c(0,i.r)
i.i = data.frame()
for (i.s in 1:length(session)){
i.i[i.s,1] = sum(i.r[1:i.s])+1
i.i[i.s,2] = sum(i.r[1:i.s])+nrow(integrated[[i.s]])
}
c = 1
for (i.s in 1:length(session)){
for ( n.area in 1:length(integrated[[i.s]])){
if (colnames(integrated[[i.s]][n.area]) %in% colnames(final)){
a = which(colnames(final) == colnames(integrated[[i.s]][n.area]))
integrated[[i.s]][[n.area]]
final[i.i[i.s,1]:i.i[i.s,2],a]=integrated[[i.s]][[n.area]]
} else {
final = final %>% add_column (add_column = NA)
colnames(final)[c]= colnames(integrated[[i.s]][n.area])
integrated[[i.s]][[n.area]]
final[i.i[i.s,1]:i.i[i.s,2],c]=integrated[[i.s]][[n.area]]
c = c+1
}
}
}
final[is.na(final)]=0
final = final %>% relocate(feedback)
final$feedback <- as.factor(final$feedback)
final.pca = select(final,-c(feedback))
PCA = prcomp(~., data =final.pca, center = TRUE, scale = TRUE)
plot(PCA, type = "lines")
summary(PCA)
suppressPackageStartupMessages(suppressWarnings(library(caret)))
data = as.data.frame(cbind(final$feedback,PCA$x[,1:15]))
colnames(data)[1] = 'feedback'
train = data[1:4981,]
test = data[4982:5081,]
suppressPackageStartupMessages(suppressWarnings(library(caret)))
data = as.data.frame(cbind(final$feedback,PCA$x[,1:15]))
colnames(data)[1] = 'feedback'
data$feedback <- as.factor(data$feedback)
train = data[1:4981,]
test = data[4982:5081,]
log = train(feedback~., data = train, method = "glm", family = binomial, trControl = trainControl(method = "cv"))
model = log$finalModel
prediction <- predict(model, newdata = test, type = 'response')
log = train(feedback~., data = train, method = "glm", family = binomial, trControl = trainControl(method = "cv"))
model = log$finalModel
prediction = predict(model, newdata = test, type = 'response')
accuracy = confusionMatrix(predictions > 0.5, test$feedback)$overall['Accuracy']
log = train(feedback~., data = train, method = "glm", family = binomial, trControl = trainControl(method = "cv"))
model = log$finalModel
prediction = predict(model, newdata = test, type = 'response')
accuracy = confusionMatrix(prediction > 0.5, test$feedback)$overall['Accuracy']
suppressPackageStartupMessages(suppressWarnings(library(caret)))
data = as.data.frame(cbind(final$feedback,PCA$x[,1:15]))
colnames(data)[1] = 'feedback'
data$feedback <- as.factor(data$feedback)
train = data[1:4981,]
test = data[4982:5081,]
log = train(feedback~., data = train, method = "glm", family = binomial, trControl = trainControl(method = "cv"))
model = log$finalModel
prediction = predict(model, newdata = test, type = 'response')
prediction <- factor(prediction, levels = levels(test$feedback))
accuracy = confusionMatrix(prediction > 0.5, test$feedback)$overall['Accuracy']
suppressPackageStartupMessages(suppressWarnings(library(tidyverse)))
suppressWarnings(library(knitr))
session=list()
name = c()
date = c()
trials = c()
neurons = c()
nareas = c()
rate = c()
for(i in 1:18){
session[[i]]=readRDS(paste('C:/Users/Daisy/Downloads/R scripts/STA 141A/Data/session',i,'.rds',sep=''))
name[i]=session[[i]]$mouse_name
date[i]=session[[i]]$date_exp
trials[i]=length(session[[i]]$feedback_type)
neurons[i]=length(session[[i]]$brain_area)
nareas[i]=length(unique(session[[i]]$brain_area))
options(digits=2)
rate[i]=mean(session[[i]]$feedback_type+1)/2
}
overview = tibble(1:18, date, name, trials, neurons, nareas, rate)
colnames(overview) = c('Session', 'Date of Experiment','Mouse Name','Number of Trials', 'Number of Neurons','Number of Brain Areas Involved', 'Success Rate')
knitr::kable(overview, caption = 'Data Set Overview')
i.s= 17
i.t = 1
spk.trial = session[[i.s]]$spks[[i.t]]
feedback = session[[i.s]]$feedback_type[[i.t]]
area=session[[i.s]]$brain_area
spk.count=apply(spk.trial,1,sum)
s17t1 = data.frame(area,spk.count)
print(data.frame(aggregate(.~area,data=s17t1,FUN=sum),feedback))
print(data.frame(aggregate(.~area,data=s17t1,FUN=mean),feedback))
s17 = data.frame()
for( i.t in 1:length(session[[i.s]]$feedback_type)){
spk.trial = session[[i.s]]$spks[[i.t]]
feedback = session[[i.s]]$feedback_type[[i.t]]
area=session[[i.s]]$brain_area
spk.count=apply(spk.trial,1,sum)
df = data.frame(area,spk.count)
s17 = rbind(s17,data.frame(aggregate(.~area,data=df,FUN=sum),feedback))
}
ggplot(s17, aes(spk.count, feedback, colour = area)) +
geom_point()+
scale_x_continuous(n.breaks=10)+
scale_y_continuous(n.breaks=2)+
labs(x = 'Number of Spikes', y ='Feedback',title = 'Total Number of Spikes vs. Feedback') +
theme(plot.title = element_text(hjust = 0.5))
s17.avg = data.frame()
for( i.t in 1:length(session[[i.s]]$feedback_type)){
spk.trial = session[[i.s]]$spks[[i.t]]
feedback = session[[i.s]]$feedback_type[[i.t]]
area=session[[i.s]]$brain_area
spk.count=apply(spk.trial,1,sum)
df = data.frame(area,spk.count)
s17.avg = rbind(s17.avg,data.frame(aggregate(.~area,data=df,FUN=mean),feedback))
}
ggplot(s17.avg, aes(spk.count, feedback, colour = area)) +
geom_point()+
scale_x_continuous(n.breaks=10)+
scale_y_continuous(n.breaks=2)+
labs(x = 'Number of Spikes', y ='Feedback',title = 'Average Number of Spikes vs. Feedback') +
theme(plot.title = element_text(hjust = 0.5))
i.t = 1
spks = data.frame(session[[i.s]]$spks[[i.t]])
time.points = session[[i.s]]$time[[i.t]]
colnames(spks) = time.points
spks = cbind(area, spks)
rc = data.frame()
for ( r in 1:nrow(spks)){
for (c in 2:ncol(spks)){
if (spks[r,c]>0){
time = as.numeric(colnames(spks)[c])
info = c(spks[r,1],time,r,spks[r,c])
rc = rbind(rc,info)
}
}
}
colnames(rc) = c('area','time','neurons','size')
options(digits=9)
rc$time = as.numeric(rc$time)
ggplot(data = rc, aes(x=as.numeric(time), y =neurons, color = area, size = size))+
geom_point()+
labs(title = 'Neural Acitivity in Session 17 Trial 1',
subtitle = 'Failure(-1)')+
scale_x_continuous(name = 'Time(s)',n.breaks=10)+
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.title = element_text(hjust = 0.5))
i.t = 2
spks = data.frame(session[[i.s]]$spks[[i.t]])
time.points = session[[i.s]]$time[[i.t]]
colnames(spks) = time.points
spks = cbind(area, spks)
rc = data.frame()
for ( r in 1:nrow(spks)){
for (c in 2:ncol(spks)){
if (spks[r,c]>0){
time = as.numeric(colnames(spks)[c])
info = c(spks[r,1],time,r,spks[r,c])
rc = rbind(rc,info)
}
}
}
colnames(rc) = c('area','time','neurons','size')
options(digits=9)
rc$time = as.numeric(rc$time)
ggplot(data = rc, aes(x=as.numeric(time), y =neurons, color = area, size =size))+
geom_point()+
labs(title = 'Neural Acitivity in Session 17 Trial 2',
subtitle = 'Success(1)')+
scale_x_continuous(name = 'Time(s)',n.breaks=10)+
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.title = element_text(hjust = 0.5))
integrated = list()
for (i.s in 1:length(session)){
s = data.frame()
n.trials = length(session[[i.s]]$spks)
for (i.t in 1:n.trials){
spk.trial = session[[i.s]]$spks[[i.t]]
feedback = (session[[i.s]]$feedback_type[[i.t]]+1)/2
area=session[[i.s]]$brain_area
spk.count=apply(spk.trial,1,sum)
df = data.frame(area,spk.count)
agg = aggregate(.~area,data=df,FUN=mean)
s[i.t,1:length(agg$spk.count)] = agg[1:length(agg$spk.count),2]
s$feedback[i.t] = feedback
colnames(s) =  c(agg[1:length(agg$spk.count),1],'feedback')
}
integrated[[i.s]] = s
}
final = data.frame()
i.r = c()
for (i.s in 1:length(session)){
i.r[i.s] = nrow(integrated[[i.s]])
}
i.r = c(0,i.r)
i.i = data.frame()
for (i.s in 1:length(session)){
i.i[i.s,1] = sum(i.r[1:i.s])+1
i.i[i.s,2] = sum(i.r[1:i.s])+nrow(integrated[[i.s]])
}
c = 1
for (i.s in 1:length(session)){
for ( n.area in 1:length(integrated[[i.s]])){
if (colnames(integrated[[i.s]][n.area]) %in% colnames(final)){
a = which(colnames(final) == colnames(integrated[[i.s]][n.area]))
integrated[[i.s]][[n.area]]
final[i.i[i.s,1]:i.i[i.s,2],a]=integrated[[i.s]][[n.area]]
} else {
final = final %>% add_column (add_column = NA)
colnames(final)[c]= colnames(integrated[[i.s]][n.area])
integrated[[i.s]][[n.area]]
final[i.i[i.s,1]:i.i[i.s,2],c]=integrated[[i.s]][[n.area]]
c = c+1
}
}
}
final[is.na(final)]=0
final = final %>% relocate(feedback)
#final$feedback[final$feedback==1] = 'Success'
#final$feedback[final$feedback==0] = 'Failure'
final.pca = select(final,-c(feedback))
PCA = prcomp(~., data =final.pca, center = TRUE, scale = TRUE)
plot(PCA, type = "lines")
summary(PCA)
suppressPackageStartupMessages(suppressWarnings(library(caret)))
data = data.frame(final$feedback, PCA$x[,1:5])
colnames(data)[1] = 'feedback'
train = data[1:4981,]
test = data[4982:5081,]
logit_model = glm(feedback ~ ., data = train, family = binomial)
predicted = predict(logit_model, newdata = test, type = "response")
library(pROC)
roc = roc(test$feedback, predicted)
optimalcutoff = coords(roc, "best")
optimalcutoff
predicted_classes <- ifelse(predicted>optimalcutoff$threshold, 1, 0)
confusion_matrix = table(predicted_classes, test$feedback)
confusion_matrix
accuracy <- sum(diag(confusion_matrix))/sum(confusion_matrix)
accuracy
suppressPackageStartupMessages(suppressWarnings(library(caret)))
data = data.frame(final$feedback, PCA$x[,1:11])
colnames(data)[1] = 'feedback'
train = data[1:4981,]
test = data[4982:5081,]
logit_model = glm(feedback ~ ., data = train, family = binomial)
predicted = predict(logit_model, newdata = test, type = "response")
library(pROC)
roc = roc(test$feedback, predicted)
optimalcutoff = coords(roc, "best")
optimalcutoff
predicted_classes <- ifelse(predicted>optimalcutoff$threshold, 1, 0)
confusion_matrix = table(predicted_classes, test$feedback)
confusion_matrix
accuracy <- sum(diag(confusion_matrix))/sum(confusion_matrix)
accuracy
suppressPackageStartupMessages(suppressWarnings(library(caret)))
data = data.frame(final$feedback, PCA$x[,1:5])
colnames(data)[1] = 'feedback'
train = data[1:4981,]
test = data[4982:5081,]
logit_model = glm(feedback ~ ., data = train, family = binomial)
predicted = predict(logit_model, newdata = test, type = "response")
library(pROC)
roc = roc(test$feedback, predicted)
optimalcutoff = coords(roc, "best")
optimalcutoff
predicted_classes <- ifelse(predicted>optimalcutoff$threshold, 1, 0)
confusion_matrix = table(predicted_classes, test$feedback)
confusion_matrix
accuracy <- sum(diag(confusion_matrix))/sum(confusion_matrix)
accuracy
for ( i in 1:2){
test[[i]]=readRDS(paste('C:/Users/Daisy/Downloads/R scripts/STA141A/Data/test',i,'.rds',sep=''))
}
setwd("C:/Users/Daisy/Downloads/R scripts/STA 141A/Data")
for ( i in 1:2){
test[[i]]=readRDS(paste('C:/Users/Daisy/Downloads/R scripts/STA141A/Data/test',i,'.rds',sep=''))
}
suppressPackageStartupMessages(suppressWarnings(library(tidyverse)))
suppressWarnings(library(knitr))
session=list()
name = c()
date = c()
trials = c()
neurons = c()
nareas = c()
rate = c()
for(i in 1:18){
session[[i]]=readRDS(paste('C:/Users/Daisy/Downloads/R scripts/STA 141A/Data/session',i,'.rds',sep=''))
name[i]=session[[i]]$mouse_name
date[i]=session[[i]]$date_exp
trials[i]=length(session[[i]]$feedback_type)
neurons[i]=length(session[[i]]$brain_area)
nareas[i]=length(unique(session[[i]]$brain_area))
options(digits=2)
rate[i]=mean(session[[i]]$feedback_type+1)/2
}
overview = tibble(1:18, date, name, trials, neurons, nareas, rate)
colnames(overview) = c('Session', 'Date of Experiment','Mouse Name','Number of Trials', 'Number of Neurons','Number of Brain Areas Involved', 'Success Rate')
knitr::kable(overview, caption = 'Data Set Overview')
test = list()
for ( i in 1:2){
test[[i]]=readRDS(paste('C:/Users/Daisy/Downloads/R scripts/STA141A/Data/test',i,'.rds',sep=''))
}
test = list()
for ( i in 1:2){
test[[i]]=readRDS(paste('C:/Users/Daisy/Downloads/R scripts/STA141A/Data/test',i,'.rds',sep=''))
}
test1 <- readRDS("C:/Users/Daisy/Downloads/R scripts/STA 141A/Data/test1.rds")
test2 <- readRDS("C:/Users/Daisy/Downloads/R scripts/STA 141A/Data/test2.rds")
